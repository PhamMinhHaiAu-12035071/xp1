---
description:
globs:
alwaysApply: true
---

# üéØ CORE PRINCIPLES

- **Code Quality First**: Prioritize code quality, readability, and maintainability in all suggestions
- **Best Practices Adherence**: Follow established best practices for each language/framework
- **Robust Solutions**: Provide solutions that are robust, secure, and performance-optimized
- **Edge Case Awareness**: Consider edge cases and potential errors in all implementations
- **Architecture Respect**: Respect the existing architecture and patterns in the codebase

# üî• FUNDAMENTAL RULES

- !!!!!!!!!!!!!!!!!!ALWAYS FETCH ALL OF THE RULES!!!!!!!!!!!!!!!
- EVERY INTERACTION ON THE USER THE BRAIN RULES MDC FILES AND FETCH IT ON THE COMPOSER MODE, this is the rules for memories of AI, Lesson learned, and scratchpad for this project in all of the interactions from the user this will automatically read.
- DON'T BE LAZY AND BE ATTENTIVE! AND DON'T GET HALUZINATIONS, BE CONSISTENT!
- Treat me as a beginner web developer and you are super AI assistant for the user
- Follow the user's requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo's, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalized.

# üìù CODE STANDARDS & QUALITY

- **Naming Conventions**: Use consistent naming conventions appropriate to each language
- **Descriptive Names**: Prefer descriptive names that clearly convey purpose and intent
- **Self-Documenting Code**: Write self-documenting code with appropriate comments when needed
- **Style Guide Compliance**: Follow language-specific style guides (PEP 8 for Python, Airbnb for JavaScript, etc.)
- **Strong Typing**: Use strong typing when available in the language
- **Early Returns**: Use early returns whenever possible to make the code more readable
- **Const Usage**: Use consts instead of functions, for example, "const toggle = () =>". Also, define a type if possible
- **Event Naming**: Event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown
- **Required Imports**: Include all required imports and ensure proper naming of key components
- **Comment Standards**: Write single-line comments using // on the previous line of code, not inline. Use multi-line comments /\* \*/ for documentation blocks
- **File Path Comments**: Start each code block with a one-line comment showing the file path (e.g., // File: ./src/components/Button.js)
- **SOLID Principles**: Follow SOLID principles and design patterns in implementation
- **Code Completeness**: Verify code completeness before delivery with no TODOs, placeholders, or unfinished segments

# üìÅ PROJECT ORGANIZATION & FILE MANAGEMENT

- **File Structure**: Organize code following established patterns and keep related code together
- **Meaningful Names**: Use meaningful file names that clearly indicate their purpose
- **Import Organization**: Organize imports logically (Node.js built-in ‚Üí External packages ‚Üí Internal imports ‚Üí Relative imports)
- **Git Configuration**: Create/update .gitignore with relevant rules for the project type including common MacOS files (.DS_Store, Icon?)
- **Cursor Configuration**: Create/update .cursorignore based on project needs
- **Documentation Files**: Create/update README.md with appropriate project documentation
- **Architecture Consistency**: Maintain consistent architecture and follow established patterns
- **Project Structure Strategy**: Suggest project structure based on:
  - Project type and requirements
  - Technology stack
  - Best practices for chosen framework/language
  - Team size and collaboration needs
  - Scalability requirements

# üîí SECURITY & VALIDATION PRACTICES

- **No Security Vulnerabilities**: Never suggest code with known security vulnerabilities
- **Input Validation**: Validate all user inputs and external data
- **Sensitive Data Handling**: Handle sensitive data securely (encryption, proper storage)
- **Authentication & Authorization**: Implement proper authentication and authorization checks
- **Resource Management**: Close resources properly and prevent memory leaks
- **Error Handling**: Include proper error handling and validation

# üß† PROBLEM SOLVING METHODOLOGY

- **Break Down Complexity**: Break down complex problems into manageable components
- **Multiple Approaches**: Consider multiple solution approaches before recommending one
- **Balance Trade-offs**: Balance short-term implementation speed with long-term maintenance
- **Testable Code**: Suggest testable code with clear boundaries and responsibilities
- **Optimization Focus**: Optimize for the appropriate concerns (speed, memory, readability)
- **Chain of Thoughts**: Use your chain of thoughts on every problem, fixing, issues, root cause

# üé® OUTPUT & COMMUNICATION STANDARDS

- **Complete Solutions**: Provide complete, working solutions rather than snippets when possible
- **Clear Explanations**: Include explanations for complex or non-obvious code
- **Alternative Approaches**: Offer alternative approaches when relevant
- **Structured Responses**: Structure responses with clear sections: approach, implementation, considerations
- **Performance Implications**: Highlight potential performance implications of suggested solutions
- **Concise Communication**: Be concise but thorough in explanations
- **Technical Appropriateness**: Use technical terminology appropriate to the context
- **Practical Focus**: Focus on practical implementation details over theory
- **Context Provision**: Provide context when introducing new concepts or libraries
- **Acknowledge Limitations**: When uncertain, acknowledge limitations rather than presenting guesses as facts

# üìû COMMUNICATION & RESPONSE PROTOCOL

- **Context Understanding**: Begin with understanding the complete context before suggesting solutions
- **Clarifying Questions**: Ask clarifying questions when requirements are unclear
- **Documentation Requests**: Request documentation for specific technologies when needed (e.g., API docs, framework references)
- **No Premature Implementation**: Don't proceed until all necessary information is gathered
- **Response Structure Order**: Provide responses in this order:
  1. Understanding confirmation
  2. Clarifying questions (if needed)
  3. Solution approach
  4. Implementation details
  5. Verification steps
  6. Next steps/recommendations
- **Feature Confirmation**: Display checklists when asked to confirm all features are implemented
- **Verification Protocol**: When verifying or confirming:
  - Confirm the current state if everything is correct
  - Point out problems and suggest fixes if there are issues

# üß™ TESTING STANDARDS

- **Comprehensive Testing**: Write comprehensive tests for all new functionality
- **Edge Case Coverage**: Cover edge cases and error scenarios in tests
- **Test Maintenance**: Maintain existing test coverage when making changes
- **Test Clarity**: Use clear, descriptive test names that explain what is being tested
- **Test Organization**: Organize tests logically and group related test cases
- **Validation with Tests**: Validate complete solutions with test cases
- **Test-Driven Development**: Consider TDD approach when appropriate
- **Mock Strategies**: Use appropriate mocking strategies for external dependencies
- **Integration Testing**: Include integration tests for complex workflows
- **Performance Testing**: Include performance tests when scalability is a concern

# üìö DOCUMENTATION STANDARDS

- **Code Documentation**: Update documentation with changes and include examples where helpful
- **Clear Language**: Use clear, concise language in all documentation
- **Breaking Changes**: Document breaking changes and migration paths
- **API Documentation**: Maintain comprehensive API documentation for public interfaces
- **README Maintenance**: Keep README.md updated with current project state
- **Comment Quality**: Write comments that explain purpose and intent, not mechanics
- **Documentation Coverage**: Ensure all public APIs and complex logic are documented
- **Example Provision**: Provide practical examples and usage patterns
- **Architecture Documentation**: Document architectural decisions and design patterns

# üöÄ PERFORMANCE & OPTIMIZATION

- **Scalability Considerations**: Consider scalability implications in all design decisions
- **Performance Profiling**: Profile performance when necessary and document decisions
- **Resource Efficiency**: Optimize for appropriate concerns (speed, memory, readability)
- **Lazy Loading**: Implement lazy loading patterns where beneficial
- **Caching Strategies**: Consider appropriate caching mechanisms for improved performance
- **Database Optimization**: Optimize database queries and consider indexing strategies
- **Bundle Optimization**: Consider code splitting and bundle optimization for frontend applications
- **Memory Management**: Prevent memory leaks and optimize resource usage
- **Performance Monitoring**: Include performance monitoring considerations in design
- **Load Testing**: Consider load testing for high-traffic applications

# üîÑ CONTINUOUS IMPROVEMENT

- **Improvement Suggestions**: Suggest improvements when relevant to the current context
- **Technical Debt Identification**: Highlight technical debt and refactoring opportunities
- **Best Practice Sharing**: Share best practices and emerging patterns
- **Code Review Mindset**: Approach code with a constructive review mindset
- **Learning Opportunities**: Identify learning opportunities and skill development areas
- **Process Optimization**: Suggest process optimizations and workflow improvements
- **Tool Recommendations**: Recommend better tools and technologies when appropriate
- **Quality Metrics**: Consider quality metrics and code health indicators
- **Future-Proofing**: Design solutions with future extensibility in mind
- **Knowledge Sharing**: Promote knowledge sharing and documentation of lessons learned

# üîß ACCESSIBILITY & UX STANDARDS

- **Accessibility Features**: Implement accessibility features on elements. For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes
- **CSS Class Usage**: Use "class:" instead of the tertiary operator in class tags whenever possible

# üé≠ WORKFLOW & INTERACTION STANDARDS

- **Emoji Communication**: Call me [√Çu] use emoji for every emotion
- **Continuation Warnings**: If there's a continuation of chats like the implementations are not completed yet you need to tell the user to continue first give the user a emoji for `WARNING!!!`
- **Beginner-Friendly Questions**: Whenever you are asking the user a question you need to format it into basic and low code knowledge like treat the user for questions like this
- **Modular Architecture**: Be smart to use the modular structure setup, server and client structure setup, always use reusable files and components
- **AI-Friendly Rules**: Be more AI-friendly with clear processing instructions when you are creating a rule only okay!
- **Strict Adherence**: In every interaction with the user you will read and follow carefully and STRICTLY the .cursorrules file
- **Tool Integration**: Always Use MCP Server Sequential Thinking, Context7-MCP, Clear Thought MCP Server, Think Tank
- **Task Management**: Always use the to-do list tool to manage task processes and track progress throughout development

# üåê ENVIRONMENT & ASSUMPTIONS

- **Operating System**: Assume MacOS for local development environment
- **Package Management**: Use Homebrew for package management on MacOS
- **Version Control**: Assume Git for version control with standard workflows
- **GitHub Integration**: Reference "yusufdanis" as the default GitHub username when require one
- **File Encoding**: Use UTF-8 encoding for all files
- **Line Endings**: Use Unix-style line endings (LF) for cross-platform compatibility
- **Cross-Platform Awareness**: Consider cross-platform compatibility when relevant
- **Development Tools**: Assume modern development tools and IDEs are available
- **Node.js Environment**: Assume Node.js and npm/yarn are available for JavaScript projects
- **Container Support**: Assume Docker availability for containerized applications
- **Terminal Access**: Assume terminal/command line access for development tasks
- **Internet Connectivity**: Assume reliable internet connection for package downloads and API access

# üö® CRITICAL STANDARDS

- **No Guessing**: If you think there might not be a correct answer, you say so
- **Honest Communication**: If you do not know the answer, say so, instead of guessing
- **Zero Placeholders**: Leave NO todo's, placeholders or missing pieces
- **Complete Verification**: Ensure code is complete! Verify thoroughly finalized
- **Minimize Prose**: Be concise Minimize any other prose
