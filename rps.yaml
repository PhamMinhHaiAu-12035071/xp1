# rps.yaml - Configuration file cho RPS scripts
scripts:
  # Formatting commands
  format: "fvm dart format lib/ test/ --set-exit-if-changed"
  format-check: "fvm dart format lib/ test/ --set-exit-if-changed --output=none"

  # Analysis commands
  analyze: "fvm dart analyze --fatal-infos"
  analyze-quick: "fvm dart analyze --fatal-infos"
  analyze-strict: "fvm dart analyze --fatal-infos --fatal-warnings"
  validate-deps: "fvm dart run dependency_validator"
  license-check: 'very_good packages check licenses --forbidden="GPL-2.0,GPL-3.0,LGPL-2.1,LGPL-3.0,AGPL-3.0,unknown,CC-BY-SA-4.0,SSPL-1.0" --dependency-type="direct-main,direct-dev"'

  # Combined commands
  check: "fvm dart format lib/ test/ --set-exit-if-changed && fvm dart analyze --fatal-infos"
  check-strict: "fvm dart format lib/ test/ --set-exit-if-changed && fvm dart analyze --fatal-infos --fatal-warnings"
  check-all: 'fvm dart format lib/ test/ --set-exit-if-changed && fvm dart analyze --fatal-infos && fvm dart run dependency_validator && very_good packages check licenses --forbidden="GPL-2.0,GPL-3.0,LGPL-2.1,LGPL-3.0,AGPL-3.0,unknown,CC-BY-SA-4.0,SSPL-1.0" --dependency-type="direct-main,direct-dev"'

  # Testing commands
  test: "fvm flutter test"
  test-coverage: "fvm flutter test --coverage && genhtml coverage/lcov.info -o coverage/html"

  # Build commands
  build-android: "fvm flutter build apk --release"
  build-ios: "fvm flutter build ios --release"
  build-web: "fvm flutter build web --release"

  # Environment-specific build commands
  build-dev: "fvm flutter build apk --debug --dart-define=ENVIRONMENT=development"
  build-staging: "fvm flutter build apk --release --dart-define=ENVIRONMENT=staging"
  build-prod: "fvm flutter build apk --release --dart-define=ENVIRONMENT=production"

  # Environment-specific run commands
  run-dev: "fvm flutter run --dart-define=ENVIRONMENT=development --target=lib/main_development.dart"
  run-staging: "fvm flutter run --dart-define=ENVIRONMENT=staging --target=lib/main_staging.dart"
  run-prod: "fvm flutter run --dart-define=ENVIRONMENT=production --target=lib/main_production.dart"

  # Environment configuration commands
  # Usage: Run specific environment setup before development/testing
  # Example: dart run rps generate-env-dev && dart run rps run-dev

  # Generate development environment (most common for daily development)
  generate-env-dev: "fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/development.env --delete-conflicting-outputs"

  # Generate staging environment (for testing staging configs)
  generate-env-staging: "fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/staging.env --delete-conflicting-outputs"

  # Generate production environment (for release builds)
  generate-env-prod: "fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/production.env --delete-conflicting-outputs"

  # Custom development commands
  clean: "fvm flutter clean && fvm flutter pub get"
  reset: "fvm flutter clean && fvm flutter pub get && fvm flutter pub run build_runner build --delete-conflicting-outputs"

  # Git hooks simulation
  pre-commit: "fvm dart format lib/ test/ --set-exit-if-changed && fvm dart analyze --fatal-infos && make test"

  # Team setup commands
  setup: "fvm flutter pub get && lefthook install"
  setup-full: "fvm flutter clean && fvm flutter pub get && lefthook install && fvm dart run tool/validate_commit.dart --help || echo 'Commit validator ready'"

  # Git hooks management
  hooks-install: "lefthook install"
  hooks-uninstall: "lefthook uninstall"

  # Test commit validation
  test-commit-validation: "echo 'feat(test): add validation example' > .tmp/test_commit && fvm dart run tool/validate_commit.dart .tmp/test_commit && rm .tmp/test_commit"

  # Complete environment setup commands for new team members
  # These commands provide full setup for each environment

  # Complete development environment setup (most common for new developers)
  install-dev: "echo 'ðŸš€ Setting up complete development environment...' && fvm flutter clean && fvm flutter pub get && npm install && chmod +x scripts/*.sh && ./scripts/setup-env.sh && lefthook install && fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/development.env --delete-conflicting-outputs && echo 'âœ… Development environment ready!'"

  # Complete staging environment setup
  install-staging: "echo 'ðŸš€ Setting up complete staging environment...' && fvm flutter clean && fvm flutter pub get && npm install && chmod +x scripts/*.sh && ./scripts/setup-env.sh && lefthook install && fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/staging.env --delete-conflicting-outputs && echo 'âœ… Staging environment ready!'"

  # Complete production environment setup
  install-prod: "echo 'ðŸš€ Setting up complete production environment...' && fvm flutter clean && fvm flutter pub get && npm install && chmod +x scripts/*.sh && ./scripts/setup-env.sh && lefthook install && fvm dart run build_runner clean && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/production.env --delete-conflicting-outputs && echo 'âœ… Production environment ready!'"

  # Setup all environments at once (for CI/CD or comprehensive setup)
  install-all: "echo 'ðŸš€ Setting up ALL environments...' && fvm flutter clean && fvm flutter pub get && npm install && chmod +x scripts/*.sh && ./scripts/setup-env.sh && lefthook install && fvm dart run build_runner clean && echo 'ðŸ“¦ Building development...' && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/development.env --delete-conflicting-outputs && echo 'ðŸ“¦ Building staging...' && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/staging.env --delete-conflicting-outputs && echo 'ðŸ“¦ Building production...' && fvm dart run build_runner build --define=envied_generator:envied=path=lib/features/env/production.env --delete-conflicting-outputs && echo 'ðŸŽ‰ ALL environments ready!'"
