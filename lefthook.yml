# lefthook.yml
# Official git hooks only - custom commands moved to scripts/ and Makefile

# Official git hooks with scripts + Makefile integration
pre-commit:
  parallel: true
  commands:
    # Format and fix code first (staged files only)
    rps-pre-commit:
      glob: "*.dart"
      run: make pre-commit
      stage_fixed: true
    # Quick spell check on staged files
    spell-check-quick:
      glob: "*.md"
      run: |
        npx cspell --config cspell.json {staged_files} --no-progress || \
        echo "‚ö†Ô∏è Fix spelling issues"
    # Format code automatically (staged files only)
    format-code:
      glob: "*.dart"
      run: make format
      stage_fixed: true
    # Quick analysis (staged files only)
    analyze-quick:
      glob: "*.dart"
      run: make analyze-quick
    # Quick license check cho staged changes
    license-quick:
      glob: "pubspec.yaml"
      run: |
        if git diff --cached --name-only | grep -q "pubspec.yaml"; then
          echo "üì¶ pubspec.yaml changed, checking licenses..."
          make license-check
        fi
    # Dependency validation when pubspec.yaml changes
    deps-check-on-pubspec-change:
      glob: "pubspec.yaml"
      run: |
        if git diff --cached --name-only | grep -q "pubspec.yaml"; then
          echo "üì¶ pubspec.yaml changed, validating dependencies..."
          make validate-deps
        fi
    # i18n validation when translation files change
    i18n-validation:
      glob: "lib/l10n/i18n/*.json"
      run: |
        if git diff --cached --name-only | grep -q "lib/l10n/i18n/.*\.json"; then
          echo "üåê Translation files changed, validating i18n..."
          make i18n-validate
        fi
    # Analyze staged files for linting and naming convention issues
    staged-analysis:
      glob: "*.dart"
      run: |
        FILES_TO_ANALYZE=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.dart$')
        if [ -n "$FILES_TO_ANALYZE" ]; then
          echo "üìù Analyzing staged Dart files for linting and naming issues..."
          make analyze-quick $FILES_TO_ANALYZE
        fi

pre-push:
  parallel: false
  commands:
    # Run bash script tests first (TDD validation)
    bash-script-tests:
      run: npm test
    # Full license compliance check tr∆∞·ªõc khi push
    license-compliance:
      run: make license-check
    # Run complete CI pipeline via Makefile
    full-ci-pipeline:
      run: make local-ci
    # Full dependency validation before push
    validate-dependencies:
      run: make validate-deps
    # Complete naming conventions validation
    naming-validation:
      run: make naming-check

commit-msg:
  commands:
    conventional-commit:
      run: fvm dart run tool/validate_commit.dart {1}
