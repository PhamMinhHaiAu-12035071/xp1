name: "Flutter Setup with FVM"
description: "Optimized Flutter setup with FVM, caching, and dependencies"
inputs:
  flutter-version:
    description: "Flutter version to use"
    required: true
    default: "3.35.1"
  cache-key-suffix:
    description: "Additional cache key suffix"
    required: false
    default: ""
  install-deps:
    description: "Install pub dependencies"
    required: false
    default: "true"
  setup-build-runner:
    description: "Setup build_runner caching"
    required: false
    default: "false"
  enable-performance-monitor:
    description: "Enable performance monitoring"
    required: false
    default: "false"
  job-name:
    description: "Name of the job for monitoring"
    required: false
    default: "flutter-setup"

outputs:
  cache-hit:
    description: "Whether cache was hit"
    value: ${{ steps.cache-check.outputs.cache-hit }}
  flutter-path:
    description: "Flutter installation path"
    value: ${{ steps.setup.outputs.flutter-path }}
  duration:
    description: "Job duration in seconds (if monitoring enabled)"
    value: ${{ steps.monitor.outputs.duration }}
  recommendations:
    description: "Performance recommendations (if monitoring enabled)"
    value: ${{ steps.monitor.outputs.recommendations }}

runs:
  using: composite
  steps:
    - name: 🗂️ Cache FVM and Flutter SDK (global)
      id: cache-check
      uses: actions/cache@v4
      with:
        path: |
          ~/.fvm
          ~/.pub-cache
        key: flutter-fvm-${{ inputs.flutter-version }}-${{ runner.os }}-v3${{ inputs.cache-key-suffix }}
        restore-keys: |
          flutter-fvm-${{ inputs.flutter-version }}-${{ runner.os }}-v3
          flutter-fvm-${{ inputs.flutter-version }}-${{ runner.os }}-

    - name: 🔧 Install FVM (if needed)
      shell: bash
      run: |
        # Install FVM if not cached or not accessible
        if ! command -v fvm &> /dev/null || [ ! -d "$HOME/.fvm" ]; then
          echo "📥 Installing FVM..."
          curl -fsSL https://fvm.app/install.sh | bash
          
          # Ensure proper sourcing for FVM
          if [ -f "$HOME/.bashrc" ]; then
            source "$HOME/.bashrc"
          fi
          if [ -f "$HOME/.zshrc" ]; then
            source "$HOME/.zshrc"
          fi
        fi

        # Add FVM to PATH and export environment variables
        export PATH="$HOME/.fvm/bin:$PATH"
        echo "$HOME/.fvm/bin" >> $GITHUB_PATH
        echo "FVM_HOME=$HOME/.fvm" >> $GITHUB_ENV

        # Verify FVM installation
        if command -v fvm &> /dev/null; then
          echo "✅ FVM is accessible at: $(which fvm)"
          fvm --version
        else
          echo "❌ FVM installation failed"
          exit 1
        fi

    - name: 🔧 Setup Flutter with FVM (optimized)
      id: setup
      shell: bash
      run: |
        # Ensure FVM in PATH with multiple fallbacks
        export PATH="$HOME/.fvm/bin:$PATH"

        # Debug PATH information
        echo "🔍 Current PATH: $PATH"
        echo "🏠 HOME directory: $HOME"
        echo "📁 FVM directory exists: $([ -d "$HOME/.fvm" ] && echo "YES" || echo "NO")"

        # Verify FVM accessibility
        if ! command -v fvm &> /dev/null; then
          echo "⚠️  FVM not in PATH, trying direct execution..."
          export PATH="$HOME/.fvm/bin:$PATH"
          
          if [ -f "$HOME/.fvm/bin/fvm" ]; then
            echo "✅ Found FVM binary at $HOME/.fvm/bin/fvm"
          else
            echo "❌ FVM binary not found"
            ls -la "$HOME/.fvm/" || echo "FVM directory doesn't exist"
            exit 1
          fi
        fi

        # Fast Flutter setup with smart caching
        echo "🔧 Setting up Flutter ${{ inputs.flutter-version }}..."
        if [ -d "$HOME/.fvm/versions/${{ inputs.flutter-version }}" ]; then
          echo "✅ Flutter ${{ inputs.flutter-version }} found in cache"
          fvm use ${{ inputs.flutter-version }} --force --skip-setup
        else
          echo "⏬ Installing Flutter ${{ inputs.flutter-version }}"
          fvm install ${{ inputs.flutter-version }} --setup
          fvm use ${{ inputs.flutter-version }} --force
        fi

        # Set up Flutter paths with multiple fallback strategies
        FLUTTER_VERSION_PATH="$HOME/.fvm/versions/${{ inputs.flutter-version }}"
        FLUTTER_BIN_PATH="$FLUTTER_VERSION_PATH/bin"
        DART_BIN_PATH="$FLUTTER_VERSION_PATH/bin/cache/dart-sdk/bin"

        # Alternative paths for different FVM configurations
        if [ ! -d "$FLUTTER_BIN_PATH" ]; then
          # Try alternative FVM directory structure
          FLUTTER_BIN_PATH="$HOME/.fvm/default/bin"
          DART_BIN_PATH="$HOME/.fvm/default/bin/cache/dart-sdk/bin"
        fi

        # Verify Flutter installation path exists
        if [ ! -d "$FLUTTER_BIN_PATH" ]; then
          echo "❌ Flutter binary path not found at: $FLUTTER_BIN_PATH"
          echo "📁 Available FVM versions:"
          ls -la "$HOME/.fvm/versions/" || echo "No versions directory"
          exit 1
        fi

        # Add Flutter and Dart binaries to PATH for current and future steps
        echo "$FLUTTER_BIN_PATH" >> $GITHUB_PATH
        echo "$DART_BIN_PATH" >> $GITHUB_PATH
        export PATH="$FLUTTER_BIN_PATH:$DART_BIN_PATH:$PATH"

        # Set environment variables for persistence
        echo "FLUTTER_ROOT=$FLUTTER_VERSION_PATH" >> $GITHUB_ENV
        echo "FLUTTER_HOME=$FLUTTER_VERSION_PATH" >> $GITHUB_ENV
        echo "DART_HOME=$FLUTTER_VERSION_PATH/bin/cache/dart-sdk" >> $GITHUB_ENV

        # Wait a moment for PATH to propagate
        sleep 2

        # Verify both Flutter and Dart are accessible with detailed debugging
        echo "🔍 Verifying Flutter installation..."
        if command -v flutter &> /dev/null; then
          FLUTTER_LOCATION=$(which flutter)
          echo "✅ Flutter is accessible at: $FLUTTER_LOCATION"
          flutter --version --suppress-analytics
          flutter doctor --suppress-analytics | head -10
        else
          echo "❌ Flutter not found in PATH after setup"
          echo "🔍 Current PATH: $PATH"
          echo "📁 Flutter binary exists: $([ -f "$FLUTTER_BIN_PATH/flutter" ] && echo "YES" || echo "NO")"
          ls -la "$FLUTTER_BIN_PATH/" || echo "Flutter bin directory doesn't exist"
          exit 1
        fi

        echo "🔍 Verifying Dart installation..."
        if command -v dart &> /dev/null; then
          DART_LOCATION=$(which dart)
          echo "✅ Dart is accessible at: $DART_LOCATION"
          dart --version
        else
          echo "❌ Dart not found in PATH after setup"
          echo "🔍 Current PATH: $PATH"
          echo "📁 Dart binary exists: $([ -f "$DART_BIN_PATH/dart" ] && echo "YES" || echo "NO")"
          ls -la "$DART_BIN_PATH/" || echo "Dart bin directory doesn't exist"
          exit 1
        fi

        # Set output
        echo "flutter-path=$FLUTTER_VERSION_PATH" >> $GITHUB_OUTPUT
        echo "🎉 Flutter and Dart setup completed successfully!"

    - name: 🗂️ Cache pub dependencies
      if: inputs.install-deps == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool/package_config.json
        key: pub-deps-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-v2
        restore-keys: |
          pub-deps-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-
          pub-deps-${{ runner.os }}-

    - name: 🗂️ Cache build_runner (if enabled)
      if: inputs.setup-build-runner == 'true'
      uses: actions/cache@v4
      with:
        path: |
          .dart_tool/build
          lib/**/*.g.dart
          lib/**/*.config.dart
        key: build-runner-${{ runner.os }}-${{ hashFiles('**/pubspec.lock', 'build.yaml') }}-${{ hashFiles('lib/**/*.dart', '!lib/**/*.g.dart', '!lib/**/*.config.dart') }}-v3
        restore-keys: |
          build-runner-${{ runner.os }}-${{ hashFiles('**/pubspec.lock', 'build.yaml') }}-
          build-runner-${{ runner.os }}-

    - name: 📦 Install dependencies
      if: inputs.install-deps == 'true'
      shell: bash
      run: |
        # Ensure all paths are set with fallback strategies
        FLUTTER_VERSION_PATH="$HOME/.fvm/versions/${{ inputs.flutter-version }}"
        FLUTTER_BIN_PATH="$FLUTTER_VERSION_PATH/bin"
        DART_BIN_PATH="$FLUTTER_VERSION_PATH/bin/cache/dart-sdk/bin"

        # Alternative paths for different FVM configurations
        if [ ! -d "$FLUTTER_BIN_PATH" ]; then
          FLUTTER_BIN_PATH="$HOME/.fvm/default/bin"
          DART_BIN_PATH="$HOME/.fvm/default/bin/cache/dart-sdk/bin"
        fi

        export PATH="$HOME/.fvm/bin:$FLUTTER_BIN_PATH:$DART_BIN_PATH:$PATH"

        # Debug information
        echo "🔍 Dependencies setup - PATH verification"
        echo "📍 Flutter binary path: $FLUTTER_BIN_PATH"
        echo "📍 Dart binary path: $DART_BIN_PATH"
        echo "🔍 Current PATH: $PATH"

        # Verify both Flutter and Dart are accessible before running pub get
        if command -v flutter &> /dev/null && command -v dart &> /dev/null; then
          echo "✅ Flutter ready for pub get: $(which flutter)"
          echo "✅ Dart ready for pub get: $(which dart)"
          
          # Use fvm flutter to ensure version consistency
          echo "📦 Running flutter pub get..."
          fvm flutter pub get --suppress-analytics
          
          echo "✅ Dependencies installed successfully"
        else
          echo "❌ Flutter or Dart not accessible for pub get"
          echo "🔍 Flutter available: $(command -v flutter &> /dev/null && echo "YES" || echo "NO")"
          echo "🔍 Dart available: $(command -v dart &> /dev/null && echo "YES" || echo "NO")"
          echo "🔍 Current PATH: $PATH"
          exit 1
        fi

    - name: 📊 Monitor Performance
      id: monitor
      if: inputs.enable-performance-monitor == 'true'
      shell: bash
      run: |
        # Record timing
        end_time=$(date +%s)
        start_time=${GITHUB_JOB_START_TIME:-$(date +%s)}
        duration=$((end_time - start_time))

        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "⏱️ Job '${{ inputs.job-name }}' completed in ${duration}s"

        # Performance analysis
        recommendations=""
        if [ $duration -gt 300 ]; then
          recommendations="Consider using faster runners or better caching"
        elif [ $duration -gt 180 ]; then
          recommendations="Good performance, minor optimizations possible"
        else
          recommendations="Excellent performance!"
        fi

        echo "recommendations=$recommendations" >> $GITHUB_OUTPUT
        echo "💡 $recommendations"

        # Cache hit analysis
        if [ -f "$RUNNER_TEMP/cache-stats" ]; then
          echo "📊 Cache Performance:"
          cat "$RUNNER_TEMP/cache-stats"
        fi

    - name: 📈 Performance Summary
      if: inputs.enable-performance-monitor == 'true'
      shell: bash
      run: |
        echo "## 🚀 Performance Report for ${{ inputs.job-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ steps.monitor.outputs.duration }}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Recommendation**: ${{ steps.monitor.outputs.recommendations }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: ${{ runner.os }}-${{ runner.arch }}" >> $GITHUB_STEP_SUMMARY
