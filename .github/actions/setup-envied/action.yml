name: "Setup Envied Environment"
description: "Setup Flutter with envied code generation from .example templates"

inputs:
  flutter-version:
    description: "Flutter version to use"
    required: true
    default: "3.35.1"
  environment-mode:
    description: "Environment mode: all (default), development-only"
    required: false
    default: "all"
  very-good-cli:
    description: "Whether to install Very Good CLI"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ inputs.flutter-version }}
        channel: "stable"
        cache: true

    - name: 🔧 Setup Very Good CLI
      if: ${{ inputs.very-good-cli == 'true' }}
      shell: bash
      run: dart pub global activate very_good_cli

    - name: 📦 Install dependencies
      shell: bash
      run: flutter pub get

    - name: 🔧 Generate environment files
      shell: bash
      run: |
        echo "🔧 Setting up envied environment files..."

        if [[ "${{ inputs.environment-mode }}" == "all" ]]; then
          echo "🌍 Creating all environment files..."
          
          # Generate development.env
          cp lib/features/env/development.env.example lib/features/env/development.env
          sed -i "s|API_URL=.*|API_URL=${DEV_API_URL}|g" lib/features/env/development.env
          sed -i "s|APP_NAME=.*|APP_NAME=${DEV_APP_NAME}|g" lib/features/env/development.env
          sed -i "s|ENVIRONMENT_NAME=.*|ENVIRONMENT_NAME=${DEV_ENVIRONMENT_NAME}|g" lib/features/env/development.env
          sed -i "s|IS_DEBUG_MODE=.*|IS_DEBUG_MODE=${DEV_IS_DEBUG_MODE}|g" lib/features/env/development.env
          sed -i "s|API_TIMEOUT_MS=.*|API_TIMEOUT_MS=${DEV_API_TIMEOUT_MS}|g" lib/features/env/development.env
          
          # Generate staging.env
          cp lib/features/env/staging.env.example lib/features/env/staging.env
          sed -i "s|API_URL=.*|API_URL=${STAGING_API_URL}|g" lib/features/env/staging.env
          sed -i "s|APP_NAME=.*|APP_NAME=${STAGING_APP_NAME}|g" lib/features/env/staging.env
          sed -i "s|ENVIRONMENT_NAME=.*|ENVIRONMENT_NAME=${STAGING_ENVIRONMENT_NAME}|g" lib/features/env/staging.env
          sed -i "s|IS_DEBUG_MODE=.*|IS_DEBUG_MODE=${STAGING_IS_DEBUG_MODE}|g" lib/features/env/staging.env
          sed -i "s|API_TIMEOUT_MS=.*|API_TIMEOUT_MS=${STAGING_API_TIMEOUT_MS}|g" lib/features/env/staging.env
          
          # Generate production.env
          cp lib/features/env/production.env.example lib/features/env/production.env
          sed -i "s|API_URL=.*|API_URL=${PROD_API_URL}|g" lib/features/env/production.env
          sed -i "s|APP_NAME=.*|APP_NAME=${PROD_APP_NAME}|g" lib/features/env/production.env
          sed -i "s|ENVIRONMENT_NAME=.*|ENVIRONMENT_NAME=${PROD_ENVIRONMENT_NAME}|g" lib/features/env/production.env
          sed -i "s|IS_DEBUG_MODE=.*|IS_DEBUG_MODE=${PROD_IS_DEBUG_MODE}|g" lib/features/env/production.env
          sed -i "s|API_TIMEOUT_MS=.*|API_TIMEOUT_MS=${PROD_API_TIMEOUT_MS}|g" lib/features/env/production.env
          
          echo "✅ All environment files created"
        else
          echo "🚀 Creating development.env only..."
          cp lib/features/env/development.env.example lib/features/env/development.env
          sed -i "s|API_URL=.*|API_URL=${DEV_API_URL}|g" lib/features/env/development.env
          sed -i "s|APP_NAME=.*|APP_NAME=${DEV_APP_NAME}|g" lib/features/env/development.env
          sed -i "s|ENVIRONMENT_NAME=.*|ENVIRONMENT_NAME=${DEV_ENVIRONMENT_NAME}|g" lib/features/env/development.env
          sed -i "s|IS_DEBUG_MODE=.*|IS_DEBUG_MODE=${DEV_IS_DEBUG_MODE}|g" lib/features/env/development.env
          sed -i "s|API_TIMEOUT_MS=.*|API_TIMEOUT_MS=${DEV_API_TIMEOUT_MS}|g" lib/features/env/development.env
          echo "✅ Development environment file created"
        fi

    - name: 🔍 Debug before build
      shell: bash
      run: |
        echo "🔍 Debugging envied file structure before build..."
        echo "📁 Environment directory structure:"
        ls -la lib/features/env/ || echo "Directory not found"

        echo "📄 Existing .dart files:"
        find lib -name "*.dart" -path "*/env/*" -type f

        echo "📄 Existing .g.dart files:"
        find lib -name "*.g.dart" -type f

        echo "📄 Environment files (.env):"
        find lib -name "*.env" -type f

        echo "🔧 Envied class definitions:"
        find lib -name "*.dart" -path "*/env/*" -exec grep -l "@Envied" {} \; 2>/dev/null || echo "No @Envied classes found"

    - name: 🏗️ Generate envied code
      shell: bash
      run: |
        echo "🏗️ Generating envied code..."
        dart run build_runner build --delete-conflicting-outputs --verbose
        echo "✅ Envied code generation completed"

    - name: ✅ Verify envied setup
      shell: bash
      run: |
        echo "📋 Verifying envied setup..."
        echo "📁 Listing all generated files:"
        find lib -name "*.g.dart" -type f | head -10

        if [[ "${{ inputs.environment-mode }}" == "all" ]]; then
          # Verify all .env files
          for env in development staging production; do
            if [ -f "lib/features/env/${env}.env" ]; then
              echo "  ✅ ${env}.env exists"
            else
              echo "  ❌ ${env}.env missing"
              exit 1
            fi
          done

          # Verify generated files exist (flexible naming)
          GENERATED_FILES=$(find lib/features/env -name "*.g.dart" -type f | wc -l)
          if [ "$GENERATED_FILES" -ge 3 ]; then
            echo "  ✅ Found $GENERATED_FILES generated envied files"
            find lib/features/env -name "*.g.dart" -type f | while read file; do
              echo "    📄 $(basename "$file")"
            done
          else
            echo "  ❌ Expected at least 3 generated files, found: $GENERATED_FILES"
            echo "  📁 Generated files found:"
            find lib -name "*.g.dart" -type f
            exit 1
          fi
        else
          # Verify development only
          if [ -f "lib/features/env/development.env" ]; then
            echo "  ✅ development.env exists"
          else
            echo "  ❌ development.env missing"
            exit 1
          fi

          # Check for any generated envied file in the directory
          GENERATED_FILES=$(find lib/features/env -name "*.g.dart" -type f | wc -l)
          if [ "$GENERATED_FILES" -ge 1 ]; then
            echo "  ✅ Found $GENERATED_FILES generated envied file(s)"
            find lib/features/env -name "*.g.dart" -type f | while read file; do
              echo "    📄 $(basename "$file")"
            done
          else
            echo "  ❌ No generated envied files found"
            echo "  📁 All generated files in project:"
            find lib -name "*.g.dart" -type f
            exit 1
          fi
        fi

        echo "✅ Envied setup verified successfully!"
